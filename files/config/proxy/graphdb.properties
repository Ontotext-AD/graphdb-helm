###### NETWORK SETTINGS ######
#
# HTTP port for running GraphDB in standalone mode. The default is 7200.
#
# graphdb.connector.port = 7200
#
# Controls whether it is necessary to rewrite the Location header when no proxy is configured.
# Setting this property to true will use the graphdb.external-url when building the transaction URLs.
# Set it to true when the returned URLs are incorrect due to missing or invalid proxy configurations.
# Set it to false when the server can be called on multiple addresses,
# as it will override the returned address to the one defined by the graphdb.external-url.
# Boolean, default is false.
#
# graphdb.external-url.enforce.transactions = false
#
# Enable SSL (uncomment to enable)
# graphdb.connector.SSLEnabled = true
# graphdb.connector.scheme = https
# graphdb.connector.secure = true
#
# GraphDB uses the Java implementation of SSL, which requires a configured key in the Java keystore.
# To setup keystore uncomment the following properties and set keystorePass and keyPass to the actual values.
#
# The default is the file .keystore in the operating system home directory of the user that is running GraphDB
# graphdb.connector.keystoreFile = <path to the keystore file>
# graphdb.connector.keystorePass = <secret>
# graphdb.connector.keyAlias = graphdb
# graphdb.connector.keyPass = <secret>
#
# How to generate a keystore?
#
# Option 1: Generate a self-signed key, which would require to trust the certificate in all clients.
#
#   keytool -genkey -alias graphdb -keyalg RSA
#
# Option 2: Convert a third party trusted OpenSSL certificate to PKCS12 key and then import to the Java keystore.
#
#   keytool -importkeystore -deststorepass MYPASS -srckeystore mypkcs12.p12 -srcstoretype PKCS12
#
# For any additional information please refer to https://tomcat.apache.org/tomcat-9.0-doc/ssl-howto.html
#
# In addition to the above settings, you can set any Tomcat Connector attribute through a property:
#   graphdb.connector.<attribute> = xxx
#
# See https://tomcat.apache.org/tomcat-9.0-doc/config/http.html#Attributes for more information.
#
# Another option is to use Self Signed SSL Certificate setting following two properties
#
# graphdb.connector.SSLCertificateFile = <path-to-file>
# graphdb.connector.SSLCertificateKeyFile = <path-to-file>

###### AUTHENTICATION TOKEN SECRET ######
#
# GraphDB authentication token secret could be set by passing it as a configuration parameter
#
# graphdb.auth.token.secret = <my-shared-secret-key>
#
# In case of not explicitly specified, GraphDB will try to obtain one automatically from the SSL
# certificate if present or will randomly generate one

###### CLUSTER CONFIGURATIONS ######

# Dedicated cluster proxy configurations

# List the addresses of GraphDB HTTP or RPC address to the nodes that are part of a cluster
# Note that all of the addresses need to be from the same cluster


graphdb.proxy.hosts={{- range $i, $node_index := until ( (int $.Values.graphdb.clusterConfig.nodesCount) )}}http://graphdb-node-{{ $node_index }}.graphdb-node.{{ $.Release.Namespace }}.svc.cluster.local:7200{{- if gt (sub (int $.Values.graphdb.clusterConfig.nodesCount) 1 ) $node_index }},{{- end }}
{{- end }}


# The number of times a request to be retried to a different node in the cluster, when a node is not reachable, before failing the request.
# If a request could be handled by other node, other than the initial one, then other node from the cluster will be
# asked to handle the request.
# graphdb.proxy.followerRetries=3
