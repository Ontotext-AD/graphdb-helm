{{- define "graphdb.resolveDeploymentHost" -}}
  {{- $global := .Values.global | default dict -}}
  {{- $globalDeployment := $global.deployment | default dict -}}
  {{- print (index $globalDeployment "host" | default (index $global "ingressHost") | default .Values.deployment.host) -}}
{{- end }}

{{/*
Renders the URL address at which GraphDB would be accessed
*/}}
{{- define "graphdb.url.public" -}}
{{ $.Values.deployment.protocol }}://{{ include "graphdb.resolveDeploymentHost" $ }}{{ $.Values.graphdb.workbench.subpath }}
{{- end }}

{{/*
Combined image pull secrets
*/}}
{{- define "graphdb.combinedImagePullSecrets" -}}
  {{- $secrets := list -}}

  {{- if .Values.deployment.imagePullSecret -}}
    {{- $secret := dict "name" .Values.deployment.imagePullSecret -}}
    {{- $secrets = append $secrets $secret -}}
  {{- end -}}

  {{- if and .Values.global .Values.global.imagePullSecrets -}}
    {{- $secrets = concat $secrets .Values.global.imagePullSecrets -}}
  {{- end -}}

  {{- toYaml $secrets -}}
{{- end -}}

{{/*
Rendenders a volumeClaimTemplate as yaml.
If the storage class name is not specified - 'global.storageClass' is checked and if set it is used as the storageClassName for the template.
Otherwise it is left blank and cluster default will be used.
*/}}
{{- define "graphdb.renderVolumeClaimTemplateSpec" }}
  {{- if and .globalStorageClassName (not .spec.storageClassName) }}
    {{- $spec := set .spec "storageClassName" .globalStorageClassName }}
    {{- $spec | toYaml }}
  {{- else }}
    {{- .spec | toYaml }}
  {{- end }}
{{- end }}

{{/*
Render the container image for GraphDB
*/}}
{{- define "graphdb.image" -}}
  {{- $registry := .Values.images.graphdb.registry -}}
  {{- $repository := .Values.images.graphdb.repository -}}
  {{- $tag := .Values.images.graphdb.tag | default .Chart.AppVersion | toString -}}
  {{- if and .Values.global .Values.global.imageRegistry -}}
    {{- $registry = .Values.global.imageRegistry -}}
  {{- end -}}
  {{- if $registry -}}
    {{- printf "%s/%s:%s" $registry $repository $tag -}}
  {{- else -}}
    {{- printf "%s:%s" $repository $tag -}}
  {{- end -}}
{{- end }}

{{/*
Renders the gRPC address of each GraphDB node that is part of the cluster. Used in the cluster JSON config.
*/}}
{{- define "graphdb.cluster.nodes.json" -}}
  {{- range $i, $node_index := until (int .Values.graphdb.clusterConfig.nodesCount) -}}
    "{{ include "graphdb.fullname" $ }}-{{ $node_index }}.{{ include "graphdb.fullname.service.headless" $ }}.{{ $.Release.Namespace }}.svc.cluster.local:7300"
    {{- if gt (sub (int $.Values.graphdb.clusterConfig.nodesCount) 1 ) $node_index -}}
      {{- ", \n" -}}
    {{- end -}}
  {{- end -}}
{{- end -}}

{{/*
Renders the HTTP address of each GraphDB node that is part of the cluster, joined by a comma.
*/}}
{{- define "graphdb-proxy.cluster.nodes" -}}
  {{- range $i, $node_index := until (int $.Values.graphdb.clusterConfig.nodesCount) -}}
    http://{{ include "graphdb.fullname" $ }}-{{ $node_index }}.{{ include "graphdb.fullname.service.headless" $ }}.{{ $.Release.Namespace }}.svc.cluster.local:7200
    {{- if gt (sub (int $.Values.graphdb.clusterConfig.nodesCount) 1 ) $node_index -}}
      {{- ", " -}}
    {{- end -}}
  {{- end -}}
{{- end -}}
