
{{- define "graphdb.resolveDeploymentHost" -}}
  {{- $global := .Values.global | default dict -}}
  {{- $globalDeployment := $global.deployment | default dict -}}
  {{- print (index $globalDeployment "host" | default (index $global "ingressHost") | default .Values.deployment.host) -}}
{{- end }}

{{/*
Combined image pull secrets
*/}}
{{- define "graphdb.combinedImagePullSecrets" -}}
  {{- $secrets := list -}}

  {{- if .Values.deployment.imagePullSecret -}}
    {{- $secret := dict "name" .Values.deployment.imagePullSecret -}}
    {{- $secrets = append $secrets $secret -}}
  {{- end -}}

  {{- if and .Values.global .Values.global.imagePullSecrets -}}
    {{- $secrets = concat $secrets .Values.global.imagePullSecrets -}}
  {{- end -}}

  {{- toYaml $secrets -}}
{{- end -}}

{{/*
Rendenders a volumeClaimTemplate as yaml.
If the storage class name is not specified - 'global.storageClass' is checked and if set it is used as the storageClassName for the template.
Otherwise it is left blank and cluster default will be used.
*/}}
{{- define "graphdb.renderVolumeClaimTemplateSpec" }}
  {{- if and .globalStorageClassName (not .spec.storageClassName) }}
    {{- $spec := set .spec "storageClassName" .globalStorageClassName }}
    {{- $spec | toYaml }}
  {{- else }}
    {{- .spec | toYaml }}
  {{- end }}
{{- end }}

{{/*
Renders full name of the graphdb pod
*/}}
{{- define "graphdb.renderFullImageName" -}}
  {{- $fullImageName := .image.repository -}}

  {{- if or .globalRegistry .image.registry -}}
    {{- $fullImageName = printf "%s/%s" ( .image.registry | default .globalRegistry) .image.repository -}}
  {{- end -}}

  {{- if .image.tag -}}
    {{- printf "%s:%s" $fullImageName .image.tag -}}
  {{- else -}}
    {{- print $fullImageName -}}
  {{- end -}}
{{- end -}}
