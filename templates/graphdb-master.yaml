# Loop over the replica count
{{ range $i, $master_index := untilStep 1 (add1 $.Values.graphdb.clusterConfig.mastersCount | int ) 1 }}

{{ $worker_endpoint := printf "http://graphdb-master-%d:7200" $master_index }}
{{- $authToken := ((printf "%s:%s" $.Values.graphdb.security.provisioningUsername $.Values.graphdb.security.provisioningPassword) | b64enc) }}

---
apiVersion: {{ $.Values.versions.statefulset }}
kind: StatefulSet
metadata:
  name: graphdb-master-{{ $master_index }}
  labels:
    app: graphdb-master-{{ $master_index }}
spec:
  replicas: 1
  serviceName: graphdb-master-{{ $master_index }}
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: graphdb-master-{{ $master_index }}
  {{- if or (or (hasKey $.Values.graphdb.masters.persistence "volumeClaimTemplateSpec") (include "shouldRenderBackupVolumeClaimTemplate" (dict "backupRestore" $.Values.graphdb.backupRestore "master_index" $master_index))) (and $.Values.graphdb.import_directory_mount.enabled (eq $master_index 1)) }}
  volumeClaimTemplates:
  {{- end }}
    {{- if hasKey $.Values.graphdb.masters.persistence "volumeClaimTemplateSpec" }}
    - metadata:
        name: graphdb-master-{{ $master_index }}-data-dynamic-pvc
      {{- $spec := dict "globalStorageClassName" $.Values.global.storageClass "spec" $.Values.graphdb.masters.persistence.volumeClaimTemplateSpec }}
      spec: {{ include "renderVolumeClaimTemplateSpec" $spec | nindent 8 }}
    {{- end }}
    {{- if (include "shouldRenderBackupVolumeClaimTemplate" (dict "backupRestore" $.Values.graphdb.backupRestore "master_index" $master_index)) }}
    - metadata:
        name: graphdb-backup-pvc
      {{- $spec := dict "globalStorageClassName" $.Values.global.storageClass "spec" $.Values.graphdb.backupRestore.persistence.volumeClaimTemplateSpec }}
      spec: {{ include "renderVolumeClaimTemplateSpec" $spec | nindent 8 }}
    {{- end }}
    {{- if and $.Values.graphdb.import_directory_mount.enabled (eq $master_index 1) }}
    - metadata:
        name: graphdb-server-import-dir
      {{- $spec := dict "globalStorageClassName" $.Values.global.storageClass "spec" $.Values.graphdb.import_directory_mount.volumeClaimTemplateSpec }}
      spec: {{ include "renderVolumeClaimTemplateSpec" $spec | nindent 8 }}
    {{- end }}
  template:
    metadata:
      labels:
        app: graphdb-master-{{ $master_index }}
        app-release: {{ $.Release.Name }}
        app-type: master
    spec:
      terminationGracePeriodSeconds: 120
      volumes:
        {{- if ne (default $.Values.graphdb.masters.license (include "resolveMasterValue" (dict "nodes" $.Values.graphdb.masters.nodes "value_name" "license" "master_index" $master_index))) "" }}
        - name: graphdb-master-license
          secret:
            secretName: {{ default $.Values.graphdb.masters.license (include "resolveMasterValue" (dict "nodes" $.Values.graphdb.masters.nodes "value_name" "license" "master_index" $master_index)) }}
        {{- end }}
        {{- if not (hasKey $.Values.graphdb.masters.persistence "volumeClaimTemplateSpec") }}
        - name: graphdb-master-storage
          persistentVolumeClaim:
            claimName: graphdb-master-{{ $master_index }}-data-pvc
        {{- end }}
        - name: graphdb-master-repo-config
          configMap:
            name: {{ required "Config map with .ttl for repositories creation is required!" $.Values.graphdb.masters.repositoryConfigmap }}
        - name: graphdb-master-settings-config
          configMap:
            name: {{ required "Config map with settings.js (and graphdb.properties(optional) ) for security/settings provisioning is required!" $.Values.graphdb.masters.settingsConfigmap }}
        {{- if $.Values.deployment.logbackConfigMap }}
        - name: graphdb-logback-config
          configMap:
            name: {{ $.Values.deployment.logbackConfigMap }}
        {{- end }}
      imagePullSecrets:
        {{- include "combinedImagePullSecrets" $ | nindent 8 }}
      nodeSelector:
        {{- default "{}" (default ($.Values.graphdb.masters.nodeSelector | toYaml) (include "resolveMasterValue" (dict "nodes" $.Values.graphdb.masters.nodes "value_name" "nodeSelector" "master_index" $master_index))) | nindent 8  }}
      affinity:
        {{- default "{}" (default ($.Values.graphdb.masters.affinity | toYaml) (include "resolveMasterValue" (dict "nodes" $.Values.graphdb.masters.nodes "value_name" "affinity" "master_index" $master_index))) | nindent 8  }}
      tolerations:
        {{- default "{}" (default ($.Values.graphdb.masters.tolerations | toYaml) (include "resolveMasterValue" (dict "nodes" $.Values.graphdb.masters.nodes "value_name" "tolerations" "master_index" $master_index))) | nindent 8  }}
      topologySpreadConstraints:
        {{- default "{}" (default ($.Values.graphdb.masters.topologySpreadConstraints | toYaml) (include "resolveMasterValue" (dict "nodes" $.Values.graphdb.masters.nodes "value_name" "topologySpreadConstraints" "master_index" $master_index))) | nindent 8  }}
      containers:
        - name: graphdb-master-{{ $master_index }}
          image: {{ include "renderFullImageName" (dict "globalRegistry" $.Values.global.imageRegistry "image" $.Values.images.graphdb) }}
          imagePullPolicy: {{ $.Values.deployment.imagePullPolicy }}
          ports:
            - name: graphdb-m-{{ $master_index }}
              containerPort: 7200
          envFrom:
            - configMapRef:
                name: graphdb-master-{{ $master_index }}-configmap
          volumeMounts:
            {{- if hasKey $.Values.graphdb.masters.persistence "volumeClaimTemplateSpec" }}
            - name: graphdb-master-{{ $master_index }}-data-dynamic-pvc
            {{- else }}
            - name: graphdb-master-storage
            {{- end }}
              mountPath: /opt/graphdb/home
            {{- if and (eq ($master_index | int64) 1) (include "shouldRenderBackupVolumeClaimTemplate" (dict "backupRestore" $.Values.graphdb.backupRestore "master_index" $master_index)) }}
            - name: graphdb-backup-pvc
              mountPath: /opt/graphdb/backups
            {{- end }}
            {{- if and $.Values.graphdb.import_directory_mount.enabled (eq $master_index 1) }}
            - name: graphdb-server-import-dir
              mountPath: /opt/graphdb/home/graphdb-import
            {{- end }}
          resources: {{ $.Values.graphdb.masters.resources | toYaml | nindent 12 }}
          # Allow for GraphDB to start within 10*30 seconds before readiness & liveness probes interfere
          startupProbe:
            httpGet:
              path: /protocol
              port: graphdb-m-{{ $master_index }}
            failureThreshold: 30
            timeoutSeconds: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /protocol
              port: graphdb-m-{{ $master_index }}
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /protocol
              port: graphdb-m-{{ $master_index }}
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 10
      initContainers:
        {{- if ne (default $.Values.graphdb.masters.license (include "resolveMasterValue" (dict "nodes" $.Values.graphdb.masters.nodes "value_name" "license" "master_index" $master_index))) "" }}
        # LICENSE PROVISION
        - name: provision-license
          image: {{ include "renderFullImageName" (dict "globalRegistry" $.Values.global.imageRegistry "image" $.Values.images.busybox) }}
          imagePullPolicy: {{ $.Values.deployment.imagePullPolicy }}
          volumeMounts:
            {{- if hasKey $.Values.graphdb.masters.persistence "volumeClaimTemplateSpec" }}
            - name: graphdb-master-{{ $master_index }}-data-dynamic-pvc
            {{- else }}
            - name: graphdb-master-storage
            {{- end }}
              mountPath: /opt/graphdb/home
            - name: graphdb-master-license
              mountPath: /tmp/license/
          command: ['sh', '-c']
          args:
            - |
                mkdir -p /opt/graphdb/home/conf/
                cd /opt/graphdb/home/conf/
                [ -f graphdb.license ] && echo "License present, exiting..." && exit 0

                echo 'Provisioning GraphDB master {{ $master_index }} license'
                cp /tmp/license/*.license ./graphdb.license
                echo 'Done'
        {{- end }}
        # REPO PROVISION
        - name: provision-repository
          image: {{ include "renderFullImageName" (dict "globalRegistry" $.Values.global.imageRegistry "image" $.Values.images.busybox) }}
          imagePullPolicy: {{ $.Values.deployment.imagePullPolicy }}
          volumeMounts:
            {{- if hasKey $.Values.graphdb.masters.persistence "volumeClaimTemplateSpec" }}
            - name: graphdb-master-{{ $master_index }}-data-dynamic-pvc
            {{- else }}
            - name: graphdb-master-storage
            {{- end }}
              mountPath: /opt/graphdb/home
            - name: graphdb-master-repo-config
              mountPath: /tmp/graphdb
          command: ['sh', '-c']
          args:
            - |
              set -eu
              for filename in /tmp/graphdb/*.ttl; do
                repositoryName=$(grep "rep:repositoryID" $filename | sed -ne 's/rep:repositoryID "//p' | sed -ne 's/" ;//p' | sed -ne 's/^[[:space:]]*//p')
                echo "Repo name: $repositoryName"
                echo "File name: $filename"
                mkdir -p /opt/graphdb/home/data/repositories/$repositoryName ;
                cd /opt/graphdb/home/data/repositories/$repositoryName ;

                # If the repo configuration exists -> skip provisioning
                [ -f config.ttl ] && echo "Repository $repositoryName exists, skipping it..." && continue

                echo "Provisioning GraphDB $repositoryName repository with file $filename" ;
                cp $filename ./config.ttl ;
                echo 'Done'
              done
        # PROVISION SETTINGS AND SECURITY
        - name: provision-settings
          image: {{ include "renderFullImageName" (dict "globalRegistry" $.Values.global.imageRegistry "image" $.Values.images.busybox) }}
          imagePullPolicy: {{ $.Values.deployment.imagePullPolicy }}
          volumeMounts:
            {{- if hasKey $.Values.graphdb.masters.persistence "volumeClaimTemplateSpec" }}
            - name: graphdb-master-{{ $master_index }}-data-dynamic-pvc
            {{- else }}
            - name: graphdb-master-storage
            {{- end }}
              mountPath: /opt/graphdb/home
            - name: graphdb-master-settings-config
              mountPath: /tmp/graphdb
            {{- if $.Values.deployment.logbackConfigMap }}
            - name: graphdb-logback-config
              mountPath: /tmp/graphdb-configmap
            {{- end }}
          command: ['sh', '-c']
          args:
            - |
              set -eu
              if [[ ! -f /opt/graphdb/home/work/workbench/settings.js && -f /tmp/graphdb/settings.js ]]; then
                echo "Provisioning users settings with settings.js file..."
                mkdir -p /opt/graphdb/home/work/workbench ;
                cp /tmp/graphdb/settings.js /opt/graphdb/home/work/workbench/settings.js
              fi
              if [[ ! -f /opt/graphdb/home/conf/graphdb.properties && -f /tmp/graphdb/graphdb.properties ]]; then
                echo "Provisioning graphdb properties file..."
                mkdir -p /opt/graphdb/home/conf ;
                cp /tmp/graphdb/graphdb.properties /opt/graphdb/home/conf/graphdb.properties
              fi
              if [[ ! -f /opt/graphdb/home/conf/logback.xml && -f /tmp/graphdb-configmap/logback.xml ]]; then
                echo "Provisioning logging config file..."
                mkdir -p /opt/graphdb/home/conf ;
                cp /tmp/graphdb-configmap/logback.xml /opt/graphdb/home/conf/logback.xml
              fi
              mkdir -p /opt/graphdb/home/jdbc-driver
              echo 'Done'
        {{- if and (eq $.Values.graphdb.topology "standalone") (include "shouldRenderBackupVolumeClaimTemplate" (dict "backupRestore" $.Values.graphdb.backupRestore "master_index" $master_index)) }}
        - name: restore-standalone
          image: {{ include "renderFullImageName" (dict "globalRegistry" $.Values.global.imageRegistry "image" $.Values.images.busybox) }}
          imagePullPolicy: {{ $.Values.deployment.imagePullPolicy }}
          volumeMounts:
            {{- if hasKey $.Values.graphdb.masters.persistence "volumeClaimTemplateSpec" }}
            - name: graphdb-master-{{ $master_index }}-data-dynamic-pvc
            {{- else }}
            - name: graphdb-master-storage
            {{- end }}
              mountPath: /opt/graphdb/
            - name: graphdb-backup-pvc
              mountPath: {{ $.Values.deployment.storage }}/graphdb-backups/
          command: ['sh', '-c']
          args:
            - |
              {{ $repo := $.Values.graphdb.backupRestore.restore_repository -}}
              mkdir -p /opt/graphdb/home/data/repositories/{{ $repo }} ;
              cd /opt/graphdb/home/data/repositories/ ;
              echo "Backup to restore: {{ $.Values.deployment.storage }}/graphdb-backups/backup/{{ $repo }}-{{ $.Values.graphdb.backupRestore.restore_from_backup }}/"
              if [ -d {{ $.Values.deployment.storage }}/graphdb-backups/backup/{{ $repo }}-{{ $.Values.graphdb.backupRestore.restore_from_backup }}/ ]; then
                rm -rf {{ $repo }}
                unzip {{ $.Values.deployment.storage }}/graphdb-backups/backup/{{ $repo }}-{{ $.Values.graphdb.backupRestore.restore_from_backup }}/*
                echo "Successfully restored!"
              else
                echo "Nothing to restore."
              fi
        {{- end }}
        # LOADRDF TOOL
          {{- if and (and (eq $master_index 1) $.Values.graphdb.tools.loadrdf.trigger) (eq $.Values.graphdb.topology "standalone") }}
        - name: loadrdf-tool
          image: {{ include "renderFullImageName" (dict "globalRegistry" $.Values.global.imageRegistry "image" $.Values.images.graphdb) }}
          imagePullPolicy: {{ $.Values.deployment.imagePullPolicy }}
          resources:
            limits:
              cpu: {{ $.Values.graphdb.tools.resources.limits.cpu }}
              memory: {{ $.Values.graphdb.tools.resources.limits.memory }}
            requests:
              cpu:  {{ $.Values.graphdb.tools.resources.requests.cpu }}
              memory:  {{ $.Values.graphdb.tools.resources.requests.memory }}
          volumeMounts:
                  {{- if hasKey $.Values.graphdb.workers.persistence "volumeClaimTemplateSpec" }}
            - name: graphdb-worker-{{ $master_index }}-data-dynamic-pvc
                  {{- else }}
            - name: graphdb-worker-storage
                    {{- end }}
              mountPath: /opt/graphdb/home
                    {{- if and (eq $master_index 1) (or $.Values.graphdb.tools.preload.trigger $.Values.graphdb.tools.loadrdf.trigger) }}
                  {{- if hasKey $.Values.graphdb.tools.persistence "volumeClaimTemplateSpec" }}
            - name: graphdb-worker-preload-dynamic-pvc
                  {{- else }}
            - name: graphdb-worker-preload-data
                    {{- end }}
              mountPath: /tmp/graphdb/
                {{- end }}
          command: ['sh', '-c']
          args:
            - |
              cp /opt/graphdb/home/conf/graphdb.license /opt/graphdb/dist/conf/graphdb.license
              echo "graphdb.home.data = /opt/graphdb/home/data/" >> /opt/graphdb/dist/conf/graphdb.properties
              /opt/graphdb/dist/bin/loadrdf {{ $.Values.graphdb.tools.loadrdf.flags }} -c /tmp/graphdb/config.ttl -m parallel /tmp/graphdb/{{$.Values.graphdb.tools.loadrdf.rdfDataFile}}
              echo "preload with loadrdf tool is done"
          {{- end }}
          {{- if and (and (eq $master_index 1) $.Values.graphdb.tools.loadrdf.trigger) (eq $.Values.graphdb.topology "standalone") }}
        # PRELOAD TOOL
        - name: preload-tool
          image: {{ include "renderFullImageName" (dict "globalRegistry" $.Values.global.imageRegistry "image" $.Values.images.graphdb) }}
          imagePullPolicy: {{ $.Values.deployment.imagePullPolicy }}
          resources:
            limits:
              cpu: {{ $.Values.graphdb.tools.resources.limits.cpu }}
              memory: {{ $.Values.graphdb.tools.resources.limits.memory }}
            requests:
              cpu:  {{ $.Values.graphdb.tools.resources.requests.cpu }}
              memory:  {{ $.Values.graphdb.tools.resources.requests.memory }}
          volumeMounts:
                  {{- if hasKey $.Values.graphdb.workers.persistence "volumeClaimTemplateSpec" }}
            - name: graphdb-worker-{{ $master_index }}-data-dynamic-pvc
                  {{- else }}
            - name: graphdb-worker-storage
                    {{- end }}
              mountPath: /opt/graphdb/home
                  {{- if hasKey $.Values.graphdb.tools.persistence "volumeClaimTemplateSpec" }}
            - name: graphdb-worker-preload-dynamic-pvc
                  {{- else }}
            - name: graphdb-worker-preload-data
                {{- end }}
          command: ['sh', '-c']
          args:
            - |
              cp /opt/graphdb/home/conf/graphdb.license /opt/graphdb/dist/conf/graphdb.license
              echo "graphdb.home.data = /opt/graphdb/home/data/" >> /opt/graphdb/dist/conf/graphdb.properties
              /opt/graphdb/dist/bin/preload {{ $.Values.graphdb.tools.preload.flags }} -c /tmp/graphdb/config.ttl /tmp/graphdb/{{$.Values.graphdb.tools.preload.rdfDataFile}}
              echo "preload with preload tool is done"
        {{- end }}
        # STORAGE TOOL
        {{- if and (and (eq $master_index 1) $.Values.graphdb.tools.loadrdf.trigger) (eq $.Values.graphdb.topology "standalone") }}
        - name: storage-tool
          image: {{ include "renderFullImageName" (dict "globalRegistry" $.Values.global.imageRegistry "image" $.Values.images.graphdb) }}
          imagePullPolicy: {{ $.Values.deployment.imagePullPolicy }}
          resources:
            limits:
              cpu: {{ $.Values.graphdb.tools.resources.limits.cpu }}
              memory: {{ $.Values.graphdb.tools.resources.limits.memory }}
            requests:
              cpu:  {{ $.Values.graphdb.tools.resources.requests.cpu }}
              memory:  {{ $.Values.graphdb.tools.resources.requests.memory }}
          volumeMounts:
                  {{- if hasKey $.Values.graphdb.workers.persistence "volumeClaimTemplateSpec" }}
            - name: graphdb-worker-{{ $master_index }}-data-dynamic-pvc
                  {{- else }}
            - name: graphdb-worker-storage
                    {{- end }}
              mountPath: /opt/graphdb/home
          command: ['sh', '-c']
          args:
            - |
              cdate=$(date +'%Y-%m-%d')
              if [ -d /opt/graphdb/home/data/repositories/{{$.Values.graphdb.tools.storage_tool.repository}}/storage ]; then
                result=$(/opt/graphdb/dist/bin/storage-tool -command={{ $.Values.graphdb.tools.storage_tool.command }} -storage=/opt/graphdb/home/data/repositories/{{$.Values.graphdb.tools.storage_tool.repository}}/storage {{$.Values.graphdb.tools.storage_tool.options}})
                echo -e "${result}" >> /opt/graphdb/home/data/storage-tool-${cdate}.log
                echo -e "${result}"
                if echo -e "${result}" | grep -qi "inconsistent"
                then
                  exit 1
                fi
              else
                echo "The wanted repository does not exist"
              fi
        {{- end }}

---
apiVersion: {{ $.Values.versions.service }}
kind: Service
metadata:
  name: graphdb-master-{{ $master_index }}
  labels:
    app: graphdb-master-{{ $master_index }}
spec:
  selector:
    app: graphdb-master-{{ $master_index }}
  ports:
    - name: graphdb-master-{{ $master_index }}
      port: 7200
      targetPort: 7200
      protocol: TCP
{{ end }}
