#TODO: Change RPC port to whatever it is (prob from 7300 to 7210 if the api documentation is to be believed), check affinity and what not, tools
# Loop over the replica count
{{ range $i, $node_index := untilStep 1 (add1 $.Values.graphdb.clusterConfig.nodesCount | int ) 1 }}

{{- $configs := ($.Values.graphdb.configs | default dict) }}

---
apiVersion: {{ $.Values.versions.statefulset }}
kind: StatefulSet
metadata:
  name: graphdb-node-{{ $node_index }}
  labels:
    app: graphdb-node-{{ $node_index }}
spec:
  replicas: 1
  serviceName: graphdb-node-{{ $node_index }}
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: graphdb-node-{{ $node_index }}
  {{- if or (hasKey $.Values.graphdb.node.persistence "volumeClaimTemplateSpec") (and $.Values.graphdb.import_directory_mount.enabled (eq $node_index 1)) }}
  volumeClaimTemplates:
  {{- end }}
    {{- if hasKey $.Values.graphdb.node.persistence "volumeClaimTemplateSpec" }}
    - metadata:
        name: graphdb-node-{{ $node_index }}-data-dynamic-pvc
      {{- $spec := dict "globalStorageClassName" $.Values.global.storageClass "spec" $.Values.graphdb.node.persistence.volumeClaimTemplateSpec }}
      spec: {{ include "renderVolumeClaimTemplateSpec" $spec | nindent 8 }}
    {{- end }}
    {{- if and $.Values.graphdb.import_directory_mount.enabled (eq $node_index 1) }}
    - metadata:
        name: graphdb-server-import-dir
      {{- $spec := dict "globalStorageClassName" $.Values.global.storageClass "spec" $.Values.graphdb.import_directory_mount.volumeClaimTemplateSpec }}
      spec: {{ include "renderVolumeClaimTemplateSpec" $spec | nindent 8 }}
    {{- end }}
  template:
    metadata:
      labels:
        app: graphdb-node-{{ $node_index }}
    spec:
      terminationGracePeriodSeconds: 120
      volumes:
        {{- if ne ($.Values.graphdb.node.license) "" }}
        - name: graphdb-license
          secret:
            secretName: {{ $.Values.graphdb.node.license }}
        {{- end }}
        {{- if not (hasKey $.Values.graphdb.node.persistence "volumeClaimTemplateSpec") }}
        - name: graphdb-node-storage
          persistentVolumeClaim:
            claimName: graphdb-node-{{ $node_index }}-data-pvc
        {{- end }}
        - name: graphdb-node-repo-config
          configMap:
            name: {{ required "Config map with .ttl for repositories creation is required!" $.Values.graphdb.node.repositoryConfigmap }}
        {{- if or $configs.settingsConfigMap $.Values.graphdb.security.enabled }}
        - name: graphdb-settings-config
          configMap:
            name: {{ $configs.settingsConfigMap | default "graphdb-settings-configmap" }}
        {{- end }}
        {{- if or $configs.usersConfigMap $.Values.graphdb.security.enabled }}
        - name: graphdb-users-config
          configMap:
            name: {{ $configs.usersConfigMap | default "graphdb-users-configmap" }}
        {{- end }}
        {{- if $configs.propertiesConfigMap }}
        - name: graphdb-properties-config
          configMap:
            name: {{ $configs.propertiesConfigMap }}
        {{- end }}
        {{- if $configs.logbackConfigMap }}
        - name: graphdb-logback-config
          configMap:
            name: {{ $configs.logbackConfigMap }}
        {{- end }}
        {{- if $configs.jolokiaAccessConfigMap }}
        - name: graphdb-jolokia-access-config
          configMap:
            name: {{ $configs.jolokiaAccessConfigMap }}
        {{- end }}
      imagePullSecrets:
        {{- include "combinedImagePullSecrets" $ | nindent 8 }}
      nodeSelector:
        {{- default "{}" (default ($.Values.graphdb.node.nodeSelector | toYaml) (include "resolveNodeValue" (dict "nodes" $.Values.graphdb.node.nodes "value_name" "nodeSelector" "node_index" $node_index))) | nindent 8  }}
      affinity:
        {{- default "{}" (default ($.Values.graphdb.node.affinity | toYaml) (include "resolveNodeValue" (dict "nodes" $.Values.graphdb.node.nodes "value_name" "affinity" "node_index" $node_index))) | nindent 8  }}
      tolerations:
        {{- default "{}" (default ($.Values.graphdb.node.tolerations | toYaml) (include "resolveNodeValue" (dict "nodes" $.Values.graphdb.node.nodes "value_name" "tolerations" "node_index" $node_index))) | nindent 8  }}
      topologySpreadConstraints:
        {{- default "{}" (default ($.Values.graphdb.node.topologySpreadConstraints | toYaml) (include "resolveNodeValue" (dict "nodes" $.Values.graphdb.node.nodes "value_name" "topologySpreadConstraints" "node_index" $node_index))) | nindent 8  }}
      containers:
        - name: graphdb-node-{{ $node_index }}
          image: {{ include "renderFullImageName" (dict "globalRegistry" $.Values.global.imageRegistry "image" $.Values.images.graphdb) }}
          imagePullPolicy: {{ $.Values.deployment.imagePullPolicy }}
          ports:
            - name: graphdb-n-{{ $node_index }}
              containerPort: 7200
              {{- if ne $.Values.graphdb.clusterConfig.nodesCount 1.0 }}
            - name: graphdb-n-{{ $node_index }}-rpc
              containerPort: 7300
              {{ end }}
          envFrom:
            - configMapRef:
                name: graphdb-node-{{ $node_index }}-configmap
          volumeMounts:
            {{- if hasKey $.Values.graphdb.node.persistence "volumeClaimTemplateSpec" }}
            - name: graphdb-node-{{ $node_index }}-data-dynamic-pvc
            {{- else }}
            - name: graphdb-node-storage
            {{- end }}
              mountPath: /opt/graphdb/home
            {{- if and $.Values.graphdb.import_directory_mount.enabled (eq $node_index 1) }}
            - name: graphdb-server-import-dir
              mountPath: /opt/graphdb/home/graphdb-import
            {{- end }}
          resources: {{ $.Values.graphdb.node.resources | toYaml | nindent 12 }}
          # Allow for GraphDB to start within 10*30 seconds before readiness & liveness probes interfere
          startupProbe:
            httpGet:
              path: /protocol
              port: graphdb-n-{{ $node_index }}
            failureThreshold: 30
            timeoutSeconds: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /protocol
              port: graphdb-n-{{ $node_index }}
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /protocol
              port: graphdb-n-{{ $node_index }}
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 10
      initContainers:
        # LICENSE PROVISION
        - name: provision-license
          image: {{ include "renderFullImageName" (dict "globalRegistry" $.Values.global.imageRegistry "image" $.Values.images.busybox) }}
          imagePullPolicy: {{ $.Values.deployment.imagePullPolicy }}
          volumeMounts:
            {{- if hasKey $.Values.graphdb.node.persistence "volumeClaimTemplateSpec" }}
            - name: graphdb-node-{{ $node_index }}-data-dynamic-pvc
            {{- else }}
            - name: graphdb-node-storage
            {{- end }}
              mountPath: /opt/graphdb/home
            - name: graphdb-license
              mountPath: /tmp/license/
          command: ['sh', '-c']
          args:
            - |
              mkdir -p /opt/graphdb/home/conf/
              cd /opt/graphdb/home/conf/
              [ -f graphdb.license ] && rm graphdb.license

              echo 'Provisioning GraphDB node {{ $node_index }} license'
              cp /tmp/license/*.license ./graphdb.license
              echo 'Done'
        # REPO PROVISION
        - name: provision-repository
          image: {{ include "renderFullImageName" (dict "globalRegistry" $.Values.global.imageRegistry "image" $.Values.images.busybox) }}
          imagePullPolicy: {{ $.Values.deployment.imagePullPolicy }}
          volumeMounts:
            {{- if hasKey $.Values.graphdb.node.persistence "volumeClaimTemplateSpec" }}
            - name: graphdb-node-{{ $node_index }}-data-dynamic-pvc
            {{- else }}
            - name: graphdb-node-storage
            {{- end }}
              mountPath: /opt/graphdb/home
            - name: graphdb-node-repo-config
              mountPath: /tmp/graphdb
          command: ['sh', '-c']
          args:
            - |
              set -eu
              for filename in /tmp/graphdb/*.ttl; do
                repositoryName=$(grep "rep:repositoryID" $filename | sed -ne 's/rep:repositoryID "//p' | sed -ne 's/" ;//p' | sed -ne 's/^[[:space:]]*//p')
                echo "Repo name: $repositoryName"
                echo "File name: $filename"
                mkdir -p /opt/graphdb/home/data/repositories/$repositoryName ;
                cd /opt/graphdb/home/data/repositories/$repositoryName ;

                # If the repo configuration exists -> skip provisioning
                [ -f config.ttl ] && echo "Repository $repositoryName exists, exiting..." && continue

                echo "Provisioning GraphDB $repositoryName repository with file $filename" ;
                cp $filename ./config.ttl ;
                echo 'Done'
              done
        # PROVISION SETTINGS AND SECURITY
        - name: provision-settings
          image: {{ include "renderFullImageName" (dict "globalRegistry" $.Values.global.imageRegistry "image" $.Values.images.busybox) }}
          imagePullPolicy: {{ $.Values.deployment.imagePullPolicy }}
          volumeMounts:
            {{- if hasKey $.Values.graphdb.node.persistence "volumeClaimTemplateSpec" }}
            - name: graphdb-node-{{ $node_index }}-data-dynamic-pvc
            {{- else }}
            - name: graphdb-node-storage
            {{- end }}
              mountPath: /opt/graphdb/home
            {{- if or $configs.settingsConfigMap $.Values.graphdb.security.enabled }}
            - name: graphdb-settings-config
              mountPath: /tmp/graphdb-settigns-configmap
            {{- end }}
            {{- if or $configs.usersConfigMap $.Values.graphdb.security.enabled }}
            - name: graphdb-users-config
              mountPath: /tmp/graphdb-users-configmap
            {{- end }}
            {{- if $configs.propertiesConfigMap }}
            - name: graphdb-properties-config
              mountPath: /tmp/graphdb-properties-configmap
            {{- end }}
            {{- if $configs.logbackConfigMap }}
            - name: graphdb-logback-config
              mountPath: /tmp/graphdb-logback-configmap
            {{- end }}
            {{- if $configs.jolokiaAccessConfigMap }}
            - name: graphdb-jolokia-access-config
              mountPath: /tmp/graphdb-jolokia-access-configmap
            {{- end }}
          command: ['sh', '-c']
          args:
            - |
              set -eu
              if [[ ! -f /opt/graphdb/home/work/workbench/settings.js && ! -f /opt/graphdb/home/work/workbench/users.js && -f /tmp/graphdb-users-configmap/users.js ]]; then
                echo "Provisioning users with users.js file..."
                mkdir -p /opt/graphdb/home/work/workbench ;
                cp /tmp/graphdb-users-configmap/users.js /opt/graphdb/home/work/workbench/users.js
              fi
              if [[ ! -f /opt/graphdb/home/work/workbench/settings.js && -f /tmp/graphdb-settigns-configmap/settings.js ]]; then
                echo "Provisioning settings with settings.js file..."
                mkdir -p /opt/graphdb/home/work/workbench ;
                cp /tmp/graphdb-settigns-configmap/settings.js /opt/graphdb/home/work/workbench/settings.js
              fi
              if [[ ! -f /opt/graphdb/home/conf/graphdb.properties && -f /tmp/graphdb-properties-configmap/graphdb.properties ]]; then
                echo "Provisioning graphdb properties file..."
                mkdir -p /opt/graphdb/home/conf ;
                cp /tmp/graphdb-properties-configmap/graphdb.properties /opt/graphdb/home/conf/graphdb.properties
              fi
              if [[ ! -f /opt/graphdb/home/conf/logback.xml && -f /tmp/graphdb-logback-configmap/logback.xml ]]; then
                echo "Provisioning logging config file..."
                mkdir -p /opt/graphdb/home/conf ;
                cp /tmp/graphdb-logback-configmap/logback.xml /opt/graphdb/home/conf/logback.xml
              fi
              if [[ ! -f /opt/graphdb/home/conf/jolokia-access.xml && -f /tmp/graphdb-jolokia-access-configmap/jolokia-access.xml ]]; then
                echo "Provisioning jolokia access config file..."
                mkdir -p /opt/graphdb/home/conf ;
                cp /tmp/graphdb-jolokia-access-configmap/jolokia-access.xml /opt/graphdb/home/conf/jolokia-access.xml
              fi
              mkdir -p /opt/graphdb/home/jdbc-driver
              echo 'Done'
          # LOADRDF TOOL
          {{- if and (and (eq $node_index 1) $.Values.graphdb.tools.loadrdf.trigger) (eq $.Values.graphdb.clusterConfig.nodesCount 1.0) }}
        - name: loadrdf-tool
          image: {{ include "renderFullImageName" (dict "globalRegistry" $.Values.global.imageRegistry "image" $.Values.images.graphdb) }}
          imagePullPolicy: {{ $.Values.deployment.imagePullPolicy }}
          resources:
            limits:
              cpu: {{ $.Values.graphdb.tools.resources.limits.cpu }}
              memory: {{ $.Values.graphdb.tools.resources.limits.memory }}
            requests:
              cpu: {{ $.Values.graphdb.tools.resources.requests.cpu }}
              memory: {{ $.Values.graphdb.tools.resources.requests.memory }}
          volumeMounts:
                  {{- if hasKey $.Values.graphdb.node.persistence "volumeClaimTemplateSpec" }}
            - name: graphdb-node-{{ $node_index }}-data-dynamic-pvc
                  {{- else }}
            - name: graphdb-node-storage
                    {{- end }}
              mountPath: /opt/graphdb/home
                    {{- if and (eq $node_index 1) (or $.Values.graphdb.tools.preload.trigger $.Values.graphdb.tools.loadrdf.trigger) }}
                  {{- if hasKey $.Values.graphdb.tools.persistence "volumeClaimTemplateSpec" }}
            - name: graphdb-node-preload-dynamic-pvc
                  {{- else }}
            - name: graphdb-node-preload-data
                    {{- end }}
              mountPath: /tmp/graphdb/
                {{- end }}
          command: ['sh', '-c']
          args:
            - |
              cp /opt/graphdb/home/conf/graphdb.license /opt/graphdb/dist/conf/graphdb.license
              echo "graphdb.home.data = /opt/graphdb/home/data/" >> /opt/graphdb/dist/conf/graphdb.properties
              /opt/graphdb/dist/bin/loadrdf {{ $.Values.graphdb.tools.loadrdf.flags }} -c /tmp/graphdb/config.ttl -m parallel /tmp/graphdb/{{$.Values.graphdb.tools.loadrdf.rdfDataFile}}
              echo "preload with loadrdf tool is done"
          {{- end }}
          {{- if and (and (eq $node_index 1) $.Values.graphdb.tools.loadrdf.trigger) (eq $.Values.graphdb.clusterConfig.nodesCount 1.0) }}
        # PRELOAD TOOL
        - name: preload-tool
          image: {{ include "renderFullImageName" (dict "globalRegistry" $.Values.global.imageRegistry "image" $.Values.images.graphdb) }}
          imagePullPolicy: {{ $.Values.deployment.imagePullPolicy }}
          resources:
            limits:
              cpu: {{ $.Values.graphdb.tools.resources.limits.cpu }}
              memory: {{ $.Values.graphdb.tools.resources.limits.memory }}
            requests:
              cpu: {{ $.Values.graphdb.tools.resources.requests.cpu }}
              memory: {{ $.Values.graphdb.tools.resources.requests.memory }}
          volumeMounts:
                  {{- if hasKey $.Values.graphdb.node.persistence "volumeClaimTemplateSpec" }}
            - name: graphdb-node-{{ $node_index }}-data-dynamic-pvc
                  {{- else }}
            - name: graphdb-node-storage
                    {{- end }}
              mountPath: /opt/graphdb/home
                  {{- if hasKey $.Values.graphdb.tools.persistence "volumeClaimTemplateSpec" }}
            - name: graphdb-node-preload-dynamic-pvc
                  {{- else }}
            - name: graphdb-node-preload-data
                {{- end }}
          command: ['sh', '-c']
          args:
            - |
              cp /opt/graphdb/home/conf/graphdb.license /opt/graphdb/dist/conf/graphdb.license
              echo "graphdb.home.data = /opt/graphdb/home/data/" >> /opt/graphdb/dist/conf/graphdb.properties
              /opt/graphdb/dist/bin/preload {{ $.Values.graphdb.tools.preload.flags }} -c /tmp/graphdb/config.ttl /tmp/graphdb/{{$.Values.graphdb.tools.preload.rdfDataFile}}
              echo "preload with preload tool is done"
        {{- end }}
        # STORAGE TOOL
        {{- if and (and (eq $node_index 1) $.Values.graphdb.tools.loadrdf.trigger) (eq $.Values.graphdb.clusterConfig.nodesCount 1.0) }}
        - name: storage-tool
          image: {{ include "renderFullImageName" (dict "globalRegistry" $.Values.global.imageRegistry "image" $.Values.images.graphdb) }}
          imagePullPolicy: {{ $.Values.deployment.imagePullPolicy }}
          resources:
            limits:
              cpu: {{ $.Values.graphdb.tools.resources.limits.cpu }}
              memory: {{ $.Values.graphdb.tools.resources.limits.memory }}
            requests:
              cpu: {{ $.Values.graphdb.tools.resources.requests.cpu }}
              memory: {{ $.Values.graphdb.tools.resources.requests.memory }}
          volumeMounts:
                  {{- if hasKey $.Values.graphdb.node.persistence "volumeClaimTemplateSpec" }}
            - name: graphdb-node-{{ $node_index }}-data-dynamic-pvc
                  {{- else }}
            - name: graphdb-node-storage
                    {{- end }}
              mountPath: /opt/graphdb/home
          command: ['sh', '-c']
          args:
            - |
              cdate=$(date +'%Y-%m-%d')
              if [ -d /opt/graphdb/home/data/repositories/{{$.Values.graphdb.tools.storage_tool.repository}}/storage ]; then
                result=$(/opt/graphdb/dist/bin/storage-tool -command={{ $.Values.graphdb.tools.storage_tool.command }} -storage=/opt/graphdb/home/data/repositories/{{$.Values.graphdb.tools.storage_tool.repository}}/storage {{$.Values.graphdb.tools.storage_tool.options}})
                echo -e "${result}" >> /opt/graphdb/home/data/storage-tool-${cdate}.log
                echo -e "${result}"
                if echo -e "${result}" | grep -qi "inconsistent"
                then
                  exit 1
                fi
              else
                echo "The wanted repository does not exist"
              fi
        {{- end }}

---
apiVersion: {{ $.Values.versions.service }}
kind: Service
metadata:
  name: graphdb-node-{{ $node_index }}
  labels:
    app: graphdb-node-{{ $node_index }}
spec:
  selector:
    app: graphdb-node-{{ $node_index }}
  ports:
    - name: graphdb-node-{{ $node_index }}
      port: 7200
      targetPort: 7200
      protocol: TCP

{{- if ne $.Values.graphdb.clusterConfig.nodesCount 1.0 }}
---
apiVersion: {{ $.Values.versions.service }}
kind: Service
metadata:
  name: graphdb-node-{{ $node_index }}-rpc
  labels:
    app: graphdb-node-{{ $node_index }}
spec:
  selector:
    app: graphdb-node-{{ $node_index }}
  ports:
    - name: graphdb-node-{{ $node_index }}-rpc
      port: 7300
      targetPort: 7300
      protocol: TCP
{{ end }}
{{ end }}
