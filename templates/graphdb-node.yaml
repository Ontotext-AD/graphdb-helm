{{- $configs := ($.Values.graphdb.configs | default dict) }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: graphdb-node
  labels:
    app: graphdb-node
    {{- include "graphdb.labels" . | nindent 4 }}
spec:
  replicas: {{ $.Values.graphdb.clusterConfig.nodesCount }}
  serviceName: graphdb-node
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  revisionHistoryLimit: {{ .Values.graphdb.node.revisionHistoryLimit }}
  selector:
    matchLabels:
      app: graphdb-node
  {{- if or (hasKey $.Values.graphdb.node.persistence "volumeClaimTemplateSpec") ($.Values.graphdb.import_directory_mount.enabled)}}
  volumeClaimTemplates:
    {{- if hasKey $.Values.graphdb.node.persistence "volumeClaimTemplateSpec" }}
    - metadata:
        name: graphdb-node-data-dynamic-pvc
      {{- $spec := dict "globalStorageClassName" $.Values.global.storageClass "spec" $.Values.graphdb.node.persistence.volumeClaimTemplateSpec }}
      spec: {{ include "graphdb.renderVolumeClaimTemplateSpec" $spec | nindent 8 }}
    {{- end }}
    {{- if $.Values.graphdb.import_directory_mount.enabled }}
    - metadata:
        name: graphdb-server-import-dir
      {{- $spec := dict "globalStorageClassName" $.Values.global.storageClass "spec" $.Values.graphdb.import_directory_mount.volumeClaimTemplateSpec }}
      spec: {{ include "graphdb.renderVolumeClaimTemplateSpec" $spec | nindent 8 }}
    {{- end }}
  {{- end }}
  template:
    metadata:
      labels:
        app: graphdb-node
        {{- with .Values.graphdb.node.podLabels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        checksum/configmap: {{ include (print $.Template.BasePath "/configuration/graphdb-node-configmap.yaml") . | sha256sum }}
        {{- with .Values.graphdb.node.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      setHostnameAsFQDN: true
      terminationGracePeriodSeconds: {{ .Values.graphdb.node.terminationGracePeriodSeconds }}
      volumes:
        {{- if $.Values.graphdb.node.license }}
        - name: graphdb-license
          secret:
            secretName: {{ $.Values.graphdb.node.license }}
        {{- end }}
        {{- if or $configs.settingsConfigMap $.Values.graphdb.security.enabled }}
        - name: graphdb-settings-config
          configMap:
            name: {{ $configs.settingsConfigMap | default "graphdb-settings-configmap" }}
        {{- end }}
        {{- if or $configs.usersConfigMap $.Values.graphdb.security.enabled }}
        - name: graphdb-users-config
          configMap:
            name: {{ $configs.usersConfigMap | default "graphdb-users-configmap" }}
        {{- end }}
        {{- if $configs.propertiesConfigMap }}
        - name: graphdb-properties-config
          configMap:
            name: {{ $configs.propertiesConfigMap }}
        {{- end }}
        {{- if $configs.logbackConfigMap }}
        - name: graphdb-logback-config
          configMap:
            name: {{ $configs.logbackConfigMap }}
        {{- end }}
        {{- with $.Values.graphdb.node.extraVolumes }}
          {{- tpl ( toYaml . ) $ | nindent 8 }}
        {{- end }}
      {{- with .Values.graphdb.node.nodeSelector }}
      nodeSelector: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.graphdb.node.affinity }}
      affinity: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.graphdb.node.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.graphdb.node.topologySpreadConstraints }}
      topologySpreadConstraints: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.graphdb.node.podSecurityContext }}
      securityContext: {{- toYaml . | nindent 8 }}
      {{- end }}
      imagePullSecrets:
        {{- include "graphdb.combinedImagePullSecrets" $ | nindent 8 }}
      containers:
        - name: graphdb-node
          image: {{ include "graphdb.renderFullImageName" (dict "globalRegistry" $.Values.global.imageRegistry "image" $.Values.images.graphdb) }}
          imagePullPolicy: {{ $.Values.deployment.imagePullPolicy }}
          {{- with .Values.graphdb.node.command }}
          command: {{ toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.graphdb.node.args }}
          args: {{ toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - name: graphdb
              containerPort: 7200
              {{- if gt (int (.Values.graphdb.clusterConfig.nodesCount)) 1 }}
            - name: graphdb-rpc
              containerPort: 7300
              {{- end }}
          envFrom:
            - configMapRef:
                name: graphdb-node-configmap
            {{- with $.Values.graphdb.node.extraEnvFrom }}
              {{- tpl ( toYaml . ) $ | nindent 12 }}
            {{- end }}
          {{- with .Values.graphdb.node.extraEnv }}
          env: {{- tpl ( toYaml . ) $ | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- if hasKey $.Values.graphdb.node.persistence "volumeClaimTemplateSpec" }}
            - name: graphdb-node-data-dynamic-pvc
              mountPath: /opt/graphdb/home
            {{- end }}
            {{- if $.Values.graphdb.node.license }}
            - name: graphdb-license
              mountPath: /opt/graphdb/home/conf/graphdb.license
              subPath: graphdb.license
            {{- end }}
            {{- if $.Values.graphdb.import_directory_mount.enabled }}
            - name: graphdb-server-import-dir
              mountPath: /opt/graphdb/home/graphdb-import
            {{- end }}
            {{- with $.Values.graphdb.node.extraVolumeMounts }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- with .Values.graphdb.node.resources }}
          resources: {{ toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.graphdb.node.securityContext }}
          securityContext: {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.graphdb.node.startupProbe }}
          startupProbe: {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.graphdb.node.readinessProbe }}
          readinessProbe: {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.graphdb.node.livenessProbe }}
          livenessProbe: {{- toYaml . | nindent 12 }}
          {{- end }}
      initContainers:
        # PROVISION SETTINGS AND SECURITY
        - name: provision-settings
          image: {{ include "graphdb.renderFullImageName" (dict "globalRegistry" $.Values.global.imageRegistry "image" $.Values.images.busybox) }}
          imagePullPolicy: {{ $.Values.deployment.imagePullPolicy }}
          volumeMounts:
            {{- if hasKey $.Values.graphdb.node.persistence "volumeClaimTemplateSpec" }}
            - name: graphdb-node-data-dynamic-pvc
              mountPath: /opt/graphdb/home
            {{- end }}
            {{- if or $configs.settingsConfigMap $.Values.graphdb.security.enabled }}
            - name: graphdb-settings-config
              mountPath: /tmp/graphdb-settings-configmap
            {{- end }}
            {{- if or $configs.usersConfigMap $.Values.graphdb.security.enabled }}
            - name: graphdb-users-config
              mountPath: /tmp/graphdb-users-configmap
            {{- end }}
            {{- if $configs.propertiesConfigMap }}
            - name: graphdb-properties-config
              mountPath: /tmp/graphdb-properties-configmap
            {{- end }}
            {{- if $configs.logbackConfigMap }}
            - name: graphdb-logback-config
              mountPath: /tmp/graphdb-logback-configmap
            {{- end }}
          {{- with .Values.graphdb.node.initContainerSecurityContext }}
          securityContext: {{- toYaml . | nindent 12 }}
          {{- end }}
          command: ['sh', '-c']
          args:
            - |
              set -eu
              if [[ ! -f /opt/graphdb/home/work/workbench/settings.js && ! -f /opt/graphdb/home/data/users.js && -f /tmp/graphdb-users-configmap/users.js ]]; then
                echo "Provisioning users with users.js file..."
                mkdir -p /opt/graphdb/home/data ;
                cp /tmp/graphdb-users-configmap/users.js /opt/graphdb/home/data/users.js
              fi
              if [[ ! -f /opt/graphdb/home/work/workbench/settings.js && ! -f /opt/graphdb/home/data/settings.js && -f /tmp/graphdb-settings-configmap/settings.js ]]; then
                echo "Provisioning settings with settings.js file..."
                mkdir -p /opt/graphdb/home/data ;
                cp /tmp/graphdb-settings-configmap/settings.js /opt/graphdb/home/data/settings.js
              fi
              if [[ -f /tmp/graphdb-properties-configmap/graphdb.properties ]]; then
                echo "Provisioning graphdb properties file..."
                mkdir -p /opt/graphdb/home/conf ;
                cp /tmp/graphdb-properties-configmap/graphdb.properties /opt/graphdb/home/conf/graphdb.properties
              fi
              if [[ -f /tmp/graphdb-logback-configmap/logback.xml ]]; then
                echo "Provisioning logging config file..."
                mkdir -p /opt/graphdb/home/conf ;
                cp /tmp/graphdb-logback-configmap/logback.xml /opt/graphdb/home/conf/logback.xml
              fi
              mkdir -p /opt/graphdb/home/jdbc-driver
              echo 'Done'

---
apiVersion: v1
kind: Service
metadata:
  name: graphdb-node
  labels:
    app: graphdb-node
    {{- include "graphdb.labels" . | nindent 4 }}
  {{- with .Values.graphdb.node.service.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  clusterIP: None
  selector:
    app: graphdb-node
  ports:
    - name: graphdb
      port: 7200
      targetPort: 7200
      protocol: TCP
    {{- if gt (int $.Values.graphdb.clusterConfig.nodesCount) 1 }}
    - name: rpc
      port: 7300
      targetPort: 7300
      protocol: TCP
    {{- end }}

{{- if .Values.graphdb.pdb.create }}
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: graphdb-node
  labels:
    {{- include "graphdb.labels" . | nindent 4 }}
spec:
  {{- if .Values.graphdb.pdb.minAvailable }}
  minAvailable: {{ .Values.graphdb.pdb.minAvailable }}
  {{- end }}
  {{- if .Values.graphdb.pdb.maxUnavailable }}
  maxUnavailable: {{ .Values.graphdb.pdb.maxUnavailable }}
  {{- end }}
  selector:
    matchLabels:
      app: graphdb-node
{{- end }}
