{{- if .Values.graphdb.backup.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: auto-backup
  labels:
    {{- include "graphdb.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install, post-upgrade, post-rollback
    "helm.sh/hook-delete-policy": before-hook-creation, hook-failed
    "helm.sh/hook-weight": "3"
spec:
  failedJobsHistoryLimit: 2
  successfulJobsHistoryLimit: 2
  schedule: {{ .Values.graphdb.backup.schedule | quote }}
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: Never
          imagePullSecrets:
          {{- include "combinedImagePullSecrets" $ | nindent 12 }}
          securityContext:
            {{- $.Values.graphdb.jobPodSecurityContext | toYaml | nindent 12 }}
          containers:
            - name: backup
              image: {{ include "renderFullImageName" (dict "globalRegistry" $.Values.global.imageRegistry "image" $.Values.images.graphdb) }}
              envFrom:
                - secretRef:
                    name: graphdb-provision-user
              {{- if ne $.Values.graphdb.backup.type "local" }}
                - secretRef:
                    name: {{ $.Values.graphdb.backup.cloud.secretConfig }}
              {{- end }}
              securityContext: {{- $.Values.graphdb.jobSecurityContext | toYaml | nindent 16 }}
              volumeMounts:
                - name: graphdb-utils
                  mountPath: /tmp/utils
                {{- if eq .Values.graphdb.backup.type "local" }}
                - name: gdb-backups
                  mountPath: /opt/graphdb/backups
                {{- else }}
                - name: cloud-config
                  mountPath: /tmp/cloud-config
                {{- end }}
              command: ['bash']
              args:
                - "/tmp/utils/graphdb.sh"
                {{- if eq $.Values.graphdb.backup.type "local" }}
                - backup
                - {{ $.Values.graphdb.backup.local.countOfBackupsToKeep }}
                {{- else }}
                - backupCloud
                {{- end}}
                - "{{ $.Values.graphdb.backup.repositories }}"
                - "{{ $.Values.graphdb.backup.backupSystemData }}"
          volumes:
            - name: job-temp
              emptyDir:
                sizeLimit: 10Mi
          {{- if eq $.Values.graphdb.backup.type "local" }}
            - name: gdb-backups
              persistentVolumeClaim:
                claimName: {{ .Values.graphdb.backup.local.persistence.backupsVolumeName }}
          {{- end }}
            - name: graphdb-utils
              configMap:
                name: graphdb-utils-configmap
{{- end }}
