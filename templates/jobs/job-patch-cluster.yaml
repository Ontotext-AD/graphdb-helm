{{- if and .Values.cluster.jobs.patchCluster.enabled (gt (int .Values.replicas) 1) }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "graphdb.fullname.job.patch-cluster" . }}
  namespace: {{ include "graphdb.namespace" . }}
  labels:
    {{- include "graphdb.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-upgrade, post-rollback
    "helm.sh/hook-delete-policy": before-hook-creation, hook-succeeded, hook-failed
    "helm.sh/hook-weight": "2"
    {{- with .Values.annotations }}
      {{- tpl (toYaml .) $ | nindent 4 }}
    {{- end }}
spec:
  backoffLimit: {{ .Values.jobs.backoffLimit }}
  ttlSecondsAfterFinished: {{ .Values.jobs.ttlSecondsAfterFinished }}
  template:
    spec:
      restartPolicy: Never
      automountServiceAccountToken: false
      {{- if .Values.jobs.schedulerName }}
      schedulerName: {{ .Values.jobs.schedulerName }}
      {{- end }}
      {{- with .Values.jobs.dnsConfig }}
      dnsConfig: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.jobs.dnsPolicy }}
      dnsPolicy: {{ .Values.jobs.dnsPolicy }}
      {{- end }}
      {{- if .Values.jobs.priorityClassName }}
      priorityClassName: {{ .Values.jobs.priorityClassName }}
      {{- end }}
      {{- with .Values.jobs.nodeSelector }}
      nodeSelector: {{- tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      {{- with .Values.jobs.affinity }}
      affinity: {{- tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      {{- with .Values.jobs.tolerations }}
      tolerations: {{- tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      {{- with .Values.jobs.topologySpreadConstraints }}
      topologySpreadConstraints: {{- tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      {{- if or .Values.global.imagePullSecrets .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- include "graphdb.combinedImagePullSecrets" . | nindent 8 }}
      {{- end }}
      {{- with .Values.jobs.podSecurityContext }}
      securityContext: {{ toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: job-temp
          emptyDir: {{ .Values.jobs.persistence.emptyDir | toYaml | nindent 12 }}
        - name: cluster-config
          configMap:
            name: {{ (tpl .Values.cluster.config.existingConfigmap .) | default (printf "%s-cluster" (include "graphdb.fullname" .)) }}
        - name: graphdb-utils
          configMap:
            name: {{ include "graphdb.fullname.configmap.utils" . }}
      containers:
        - name: patch-cluster
          image: {{ include "graphdb.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: GRAPHDB_POD_NAME
              value: {{ include "graphdb.fullname" . }}
            - name: GRAPHDB_SERVICE_NAME
              value: {{ include "graphdb.fullname.service.headless" . }}
            - name: GRAPHDB_SERVICE_PORT
              value: {{ .Values.headlessService.ports.http | quote }}
            - name: GRAPHDB_PROXY_SERVICE_NAME
              value: {{ include "graphdb-proxy.fullname" . }}
            - name: GRAPHDB_PROXY_SERVICE_PORT
              value: {{ .Values.proxy.headlessService.ports.http | quote }}
            - name: GRAPHDB_PROTOCOL
              value: {{ include "graphdb.tomcat.protocol" . }}
            - name: GRAPHDB_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ (tpl .Values.security.provisioner.existingSecret .) | default (include "graphdb.fullname.secret.provisioning-user" .) }}
                  key: {{ .Values.security.provisioner.tokenKey }}
          {{- with .Values.jobs.securityContext }}
          securityContext: {{ toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.jobs.resources }}
          resources: {{ toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: job-temp
              mountPath: /tmp
            - name: graphdb-utils
              mountPath: /tmp/utils
            - name: cluster-config
              mountPath: /tmp/cluster-config/cluster-config.json
              subPath: {{ .Values.cluster.config.configmapKey }}
          workingDir: /tmp
          command: ["bash"]
          args:
            - "/tmp/utils/update-cluster.sh"
            - "patchCluster"
            - "/tmp/cluster-config/cluster-config.json"
            - "{{ .Values.cluster.clusterCreationTimeout }}"
{{- end }}
