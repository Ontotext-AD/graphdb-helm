#TODO: MAJOR GUTTING REQUIRED
#Set auth token var
{{- $authToken := printf "%s:%s" .Values.graphdb.security.provisioningUsername .Values.graphdb.security.provisioningPassword | b64enc }}
{{- if ne (lower .Values.graphdb.topology) "standalone" }}
apiVersion: batch/v1
kind: Job
metadata:
  name: link-graphdb-cluster-job
  annotations:
    "helm.sh/hook": post-install, post-upgrade, post-rollback
    "helm.sh/hook-delete-policy": before-hook-creation, hook-succeeded, hook-failed
spec:
  ttlSecondsAfterFinished: 300
  template:
    spec:
      imagePullSecrets:
        {{- include "combinedImagePullSecrets" $ | nindent 8 }}
      containers:
        - name: link-graphdb-cluster
          image: {{ include "renderFullImageName" (dict "globalRegistry" $.Values.global.imageRegistry "image" $.Values.images.graphdb) }}
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 0
          volumeMounts:
            - name: graphdb-utils
              mountPath: /tmp/utils
            - name: graphdb-master-repo-config
              mountPath: /tmp/master-repos
          command: ['sh','-c']
          {{- if eq (lower .Values.graphdb.topology) "1m_3w" }}
          args:
            - |
              for filename in /tmp/master-repos/*.ttl; do
                repositoryName=$(grep "rep:repositoryID" $filename | sed -ne 's/rep:repositoryID "//p' | sed -ne 's/" ;//p' | sed -ne 's/^[[:space:]]*//p')
                cp /tmp/utils/graphdb.sh /usr/local/bin/graphdb.sh; chmod +x /usr/local/bin/graphdb.sh ; /usr/local/bin/graphdb.sh link_1m_3w {{ .Values.graphdb.clusterConfig.mastersCount }} "$repositoryName" {{ .Values.graphdb.clusterConfig.workersCount }} "$repositoryName" "{{ $authToken }}" >> /proc/1/fd/1
              done
          {{- else if eq (lower .Values.graphdb.topology) "2m3w_rw_ro" }}
          args:
            - |
              for filename in /tmp/master-repos/*.ttl; do
                repositoryName=$(grep "rep:repositoryID" $filename | sed -ne 's/rep:repositoryID "//p' | sed -ne 's/" ;//p' | sed -ne 's/^[[:space:]]*//p')
                cp /tmp/utils/graphdb.sh /usr/local/bin/graphdb.sh; chmod +x /usr/local/bin/graphdb.sh ;
                /usr/local/bin/graphdb.sh waitAllInstances {{ .Values.graphdb.clusterConfig.mastersCount }} "$repositoryName" {{ .Values.graphdb.clusterConfig.workersCount }} "$repositoryName" "{{ $authToken }}";

                {{- range .Values.graphdb.clusterConfig.readOnlyMasters }}
                  /usr/local/bin/graphdb.sh setInstanceReadOnly graphdb-{{ . }} "$repositoryName" "{{ $authToken }}";
                {{- end }}

                {{ range $i, $master_index := untilStep 1 (add1 $.Values.graphdb.clusterConfig.mastersCount | int ) 1 }}
                  {{ range $j, $worker_index := untilStep 1 (add1 $.Values.graphdb.clusterConfig.workersCount | int ) 1 }}
                    /usr/local/bin/graphdb.sh linkWorkerToMaster graphdb-master-{{ $master_index }} "$repositoryName" graphdb-worker-{{ $worker_index }} "$repositoryName" "{{ $authToken }}";
                  {{- end }}
                {{- end }}

                {{- range .Values.graphdb.clusterConfig.syncPeersMapping }}
                  {{- $split := split "<->" . }}
                  /usr/local/bin/graphdb.sh setSyncPeer graphdb-{{ trim $split._0 }} "$repositoryName" graphdb-{{ trim $split._1 }} "$repositoryName" "{{ $authToken }}";
                  /usr/local/bin/graphdb.sh setSyncPeer graphdb-{{ trim $split._1 }} "$repositoryName" graphdb-{{ trim $split._0 }} "$repositoryName" "{{ $authToken }}";
                {{- end }}
                >> /proc/1/fd/1
              done
            {{- else if eq (lower .Values.graphdb.topology) "2m3w_muted" }}
          args:
            - |
              for filename in /tmp/master-repos/*.ttl; do
                repositoryName=$(grep "rep:repositoryID" $filename | sed -ne 's/rep:repositoryID "//p' | sed -ne 's/" ;//p' | sed -ne 's/^[[:space:]]*//p')
                cp /tmp/utils/graphdb.sh /usr/local/bin/graphdb.sh; chmod +x /usr/local/bin/graphdb.sh ;
                /usr/local/bin/graphdb.sh waitAllInstances {{ .Values.graphdb.clusterConfig.mastersCount }} "$repositoryName" {{ .Values.graphdb.clusterConfig.workersCount }} "$repositoryName" "{{ $authToken }}";

                  {{- range .Values.graphdb.clusterConfig.masterWorkerMapping }}
                    {{- $split := split "->" . }}
                    /usr/local/bin/graphdb.sh linkWorkerToMaster graphdb-{{ trim $split._0 }} "$repositoryName" graphdb-{{ trim $split._1 }} "$repositoryName" "{{ $authToken }}";
                  {{- end }}

                  {{ range $j, $worker_index := untilStep 1 (add1 $.Values.graphdb.clusterConfig.workersCount | int ) 1 }}
                  {{/* Set all workers as a remote location for  master 1 */}}
                    /usr/local/bin/graphdb.sh addInstanceAsRemoteLocation graphdb-master-1 graphdb-worker-{{ $worker_index }} "{{ $authToken }}";
                  {{- end }}

                  {{- range .Values.graphdb.clusterConfig.mutedMasters }}
                    /usr/local/bin/graphdb.sh setInstanceMuted graphdb-{{ . }} "$repositoryName" "{{ $authToken }}";
                  {{- end }}

                  {{- range .Values.graphdb.clusterConfig.syncPeersMapping }}
                    {{- $split := split "<->" . }}
                    /usr/local/bin/graphdb.sh setSyncPeer graphdb-{{ trim $split._0 }} "$repositoryName" graphdb-{{ trim $split._1 }} "$repositoryName" "{{ $authToken }}";
                    /usr/local/bin/graphdb.sh setSyncPeer graphdb-{{ trim $split._1 }} "$repositoryName" graphdb-{{ trim $split._0 }} "$repositoryName" "{{ $authToken }}";
                  {{- end }}
                >> /proc/1/fd/1
              done
        {{- end }}
        {{- if gt (len $.Values.graphdb.masters.additionalJmxArrtibutes) 0 }}
        - name: set-jmx-attributes
          image: {{ include "renderFullImageName" (dict "globalRegistry" $.Values.global.imageRegistry "image" $.Values.images.graphdb) }}
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 0
          volumeMounts:
            - name: graphdb-utils
              mountPath: /tmp/utils
            - name: graphdb-master-repo-config
              mountPath: /tmp/master-repos
          command: ['sh','-c']
          args:
            - |
              cp /tmp/utils/graphdb.sh /usr/local/bin/graphdb.sh
              chmod +x /usr/local/bin/graphdb.sh

              for filename in /tmp/master-repos/*.ttl; do
                repositoryName=$(grep "rep:repositoryID" $filename | sed -ne 's/rep:repositoryID "//p' | sed -ne 's/" ;//p' | sed -ne 's/^[[:space:]]*//p')

                /usr/local/bin/graphdb.sh waitMasters {{ .Values.graphdb.clusterConfig.mastersCount }} "$repositoryName"
                for i in `seq 1 {{ .Values.graphdb.clusterConfig.mastersCount }}`; do
                  {{- range $name, $value := $.Values.graphdb.masters.additionalJmxArrtibutes }}
                    /usr/local/bin/graphdb.sh setJmxAttribute "graphdb-master-$i" "$repositoryName" "{{ $authToken }}" "{{ $name }}" "{{ $value }}"
                  {{- end }}
                done
              done
        {{- end }}
      restartPolicy: Never
      volumes:
        - name: graphdb-utils
          configMap:
            name: graphdb-utils-configmap
        - name: graphdb-master-repo-config
          configMap:
            name: {{ required "Config map for config.ttl is required!" $.Values.graphdb.masters.repositoryConfigmap }}
  backoffLimit: 4
{{- end }}
