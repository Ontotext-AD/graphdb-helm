{{- if ne (int .Values.graphdb.clusterConfig.nodesCount) 1 }}
#TODO: More work required, tasks for update cluster and delete cluster too
#Set auth token var
{{- $authToken := printf "%s:%s" .Values.graphdb.security.provisioningUsername .Values.graphdb.security.provisioningPassword | b64enc }}
apiVersion: batch/v1
kind: Job
metadata:
  name: create-graphdb-cluster-job
  annotations:
    "helm.sh/hook": post-install, post-upgrade, post-rollback
    "helm.sh/hook-delete-policy": before-hook-creation, hook-succeeded, hook-failed
spec:
  ttlSecondsAfterFinished: 300
  template:
    spec:
      imagePullSecrets:
        {{- include "combinedImagePullSecrets" $ | nindent 8 }}
      containers:
        - name: create-graphdb-cluster
          image: {{ include "renderFullImageName" (dict "globalRegistry" $.Values.global.imageRegistry "image" $.Values.images.graphdb) }}
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 0
          volumeMounts:
            - name: graphdb-utils
              mountPath: /tmp/utils
            - name: cluster-config
              mountPath: /tmp/cluster-config
          command: ['sh','-c']
          args:
            - |
              cp /tmp/cluster-config/cluster-config.json /usr/local/bin/cluster-config.json
              cp /tmp/utils/graphdb.sh /usr/local/bin/graphdb.sh; chmod +x /usr/local/bin/graphdb.sh
              /usr/local/bin/graphdb.sh createCluster {{ .Values.graphdb.clusterConfig.nodesCount }} "/usr/local/bin/cluster-config.json" "{{ $authToken }}" >> /proc/1/fd/1
        {{- if false}}
        {{- if gt (len $.Values.graphdb.masters.additionalJmxArrtibutes) 0 }}
        - name: set-jmx-attributes
          image: {{ include "renderFullImageName" (dict "globalRegistry" $.Values.global.imageRegistry "image" $.Values.images.graphdb) }}
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 0
          volumeMounts:
            - name: graphdb-utils
              mountPath: /tmp/utils
            - name: graphdb-master-repo-config
              mountPath: /tmp/master-repos
          command: ['sh','-c']
          args:
            - |
              cp /tmp/utils/graphdb.sh /usr/local/bin/graphdb.sh
              chmod +x /usr/local/bin/graphdb.sh

              for filename in /tmp/master-repos/*.ttl; do
                repositoryName=$(grep "rep:repositoryID" $filename | sed -ne 's/rep:repositoryID "//p' | sed -ne 's/" ;//p' | sed -ne 's/^[[:space:]]*//p')

                /usr/local/bin/graphdb.sh waitMasters {{ .Values.graphdb.clusterConfig.mastersCount }} "$repositoryName"
                for i in `seq 1 {{ .Values.graphdb.clusterConfig.mastersCount }}`; do
                  {{- range $name, $value := $.Values.graphdb.masters.additionalJmxArrtibutes }}
                    /usr/local/bin/graphdb.sh setJmxAttribute "graphdb-master-$i" "$repositoryName" "{{ $authToken }}" "{{ $name }}" "{{ $value }}"
                  {{- end }}
                done
              done
        {{- end }}
        {{- end }}
      restartPolicy: Never
      volumes:
        - name: cluster-config
          configMap:
            name: graphdb-cluster-config-configmap
        - name: graphdb-utils
          configMap:
            name: graphdb-utils-configmap
  backoffLimit: 4
{{- end }}

