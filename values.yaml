#
# Main configuration file
#
# To override single property use --set
# To override multiple, provide another values-override.yaml with the -f flag
# See https://helm.sh/docs/chart_template_guide/values_files/
#TODO: fix descriptions, also while at it the readme needs quite the rework

global:
  imagePullSecrets: []
  storageClass: "standard"
  imageRegistry: docker.io

# K8S API versions differ on Kubernetes and local Minikube installation.
# Please, refer to: https://kubernetes.io/blog/2019/07/18/api-deprecations-in-1-16/
versions:
  api: apps/v1
  service: v1
  ingress: networking.k8s.io/v1
  deployment: apps/v1
  statefulset: apps/v1
  secret: v1
  configmap: v1
  volume: v1
  job: batch/v1
  daemon: apps/v1
  pvc: v1
  pv: v1

# Top lvl flat for easier maintenance
images:
  graphdb:
    repository: ontotext/graphdb
    tag: "10.0-SNAPSHOT"
  busybox:
    repository: busybox
    tag: "1.31"

####### DEPLOYMENT CONFIGURATIONS #######
deployment:
  # -- Defines the policy with which components will request their image.
  imagePullPolicy: IfNotPresent
  # Secret used to pull Docker images. Uncomment to use it.
  # Important: Must be created beforehand
  # imagePullSecret: ontotext5

  # -- The storage place where components will read/write their persistent data in case the default
  # persistent volumes are used. They use the node's file system.
  storage: /data
  # -- The hostname and protocol at which the graphdb will be accessible.
  # Needed to configure ingress as well as some components require it to properly render their UIs
  protocol: http
  # Important: This should be a resolvable hostname, not an IP address!
  host: localhost

  # Configures SSL termination on ingress level.
  # See https://kubernetes.github.io/ingress-nginx/examples/tls-termination/
  tls:
    # -- Feature toggle for SSL termination. Disabled by default.
    # If TLS is enabled, the protocol should also be updated (https)
    enabled: false
    # -- Name of a Kubernetes secret object with the key and certificate.
    # If TLS is enabled, it's required to be provided, depending on the deployment.
    secretName:

  # -- Ingress related configurations
  ingress:
    enabled: true
    class: nginx
    # -- Sets extra ingress annotations
    annotations: {}
    # -- Sets the maximum size for all requests to the underlying Nginx
    maxRequestSize: 512M
    # -- Default timeouts in seconds for the underlying Nginx.
    timeout:
      connect: 5
      read: 600
      send: 600

# GraphDB database configurations
graphdb:
  clusterConfig:
    # -- Number of GraphDB nodes to make a cluster with.
    # It's recommended to have odd number of nodes like 3, 5 or 7
    # Set value to 1 to run a standalone GraphDB instance.
    nodesCount: 3
    # -- A secret used for secure communication amongst the nodes in the cluster.
    clusterSecret: s3cr37
    # -- Cluster configuration parameters:
    electionMinTimeout: 7000
    electionRangeTimeout: 5000
    heartbeatInterval: 2000
    messageSize: 64
    verificationTimeout: 1500

  # -- References to configuration maps containing settings.js, users.js, graphdb.properties, and logback.xml files to overwrite
  # the default GraphDB configuration. For reference see https://graphdb.ontotext.com/documentation/standard/configuring-graphdb.html
  configs:
    # Override default settings configuration
    #settingsConfigMap: graphdb-settings-configmap
    # Override default users configuration
    #usersConfigMap: graphdb-users-configmap
    # Override default properties configuration
    #propertiesConfigMap: graphdb-properties-configmap
    # Override default logback configuration
    #logbackConfigMap: graphdb-logback-configmap

  security:
    # If the security is enabled, it's mandatory to have a provisioning user, so the health-checks and cluster linking can work properly
    enabled: false
    provisioningUsername: provisioner
    # bcrypt encrypted password. default: iHaveSuperpowers
    provisioningPassword: iHaveSuperpowers

  # -- Settings for the GraphDB cluster proxy used to communicate with the GraphDB cluster
  # Note: If there is no cluster (graphdb.clusterConfig.nodesCount is set to 1) no proxy will be deployed
  clusterProxy:
    replicas: 1
    # -- Minimum requirements for a successfully running GraphDB cluster proxy
    resources:
      limits:
        memory: 512Mi
        cpu: 500m
      requests:
        memory: 512Mi
        cpu: 500m
    # -- Java arguments with which the cluster proxy instances will be launched. GraphDB configuration properties can also be passed here in the format -Dprop=value
    java_args: "-XX:MaxRAMPercentage=70 -Ddefault.min.distinct.threshold=100m -XX:+UseContainerSupport"

  # -- Settings for the GraphDB cluster nodes
  node:
    # -- Reference to a secret containing 'graphdb.license' file to be used by the nodes.
    # Important: Must be created beforehand
    license: graphdb-license
    # -- Java arguments with which node instances will be launched. GraphDB configuration properties can also be passed here in the format -Dprop=value
    java_args: "-XX:MaxRAMPercentage=70 -Ddefault.min.distinct.threshold=100m -XX:+UseContainerSupport"

    # -- Persistence configurations.
    # By default, Helm will use a PV that reads and writes to the host file system.
    persistence:
      # use dynamic volume provisioning
      volumeClaimTemplateSpec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "5Gi"
    # -- Below are minimum requirements for data sets of up to 50 million RDF triples
    # For resizing, refer according to the GraphDB documentation
    # http://graphdb.ontotext.com/documentation/requirements.html
    resources:
      limits:
        memory: 2Gi
        cpu: 2000m
      requests:
        memory: 2Gi
        cpu: 2000m

  # GraphDB workbench configurations
  workbench:
    # -- This is the sub path at which GraphDB workbench can be opened.
    # Should be configured in the API gateway (or any other proxy in front)
    subpath: /graphdb

  # WARNING: Setting enabled to true in most cloud providers will result in an error
  # Attach additional PV which will be used as an import directory
  # https://graphdb.ontotext.com/documentation/standard/loading-data-using-the-workbench.html#importing-server-files
  import_directory_mount:
    enabled: false
    volumeClaimTemplateSpec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          storage: "10Gi"
