#
# Main configuration file
#
# To override single property use --set
# To override multiple, provide another values-override.yaml with the -f flag
# See https://helm.sh/docs/chart_template_guide/values_files/

global:
  imagePullSecrets: []
  storageClass: "standard"
  imageRegistry: docker.io

# Top lvl flat for easier maintenance
images:
  graphdb:
    repository: ontotext/graphdb
    tag: "10.4.0"
  busybox:
    repository: busybox
    tag: "1.31"

# Extra labels for the deployed resources
extraLabels: {}

####### DEPLOYMENT CONFIGURATIONS #######
deployment:
  # -- Defines the policy with which components will request their image.
  imagePullPolicy: IfNotPresent
  # Secret used to pull Docker images. Uncomment to use it.
  # Important: Must be created beforehand
  # imagePullSecret: ontotext

  # -- The hostname and protocol at which the graphdb will be accessible.
  # Needed to configure ingress as well as some components require it to properly render their UIs
  protocol: http
  # Important: This should be a resolvable hostname, not an IP address!
  host: localhost

  # Configures SSL termination on ingress level.
  # See https://kubernetes.github.io/ingress-nginx/examples/tls-termination/
  tls:
    # -- Feature toggle for SSL termination. Disabled by default.
    # If TLS is enabled, the protocol should also be updated (https)
    enabled: false
    # -- Name of a Kubernetes secret object with the key and certificate.
    # If TLS is enabled, it's required to be provided, depending on the deployment.
    secretName:

  # -- Ingress related configurations
  ingress:
    enabled: true
    class: nginx
    # -- Sets extra ingress annotations
    annotations: {}
    # -- Sets the maximum size for all requests to the underlying Nginx
    maxRequestSize: 512M
    # -- Default timeouts in seconds for the underlying Nginx.
    timeout:
      connect: 5
      read: 600
      send: 600

# GraphDB database configurations
graphdb:
  clusterConfig:
    # -- Number of GraphDB nodes to be used in the cluster.
    # Set value to 1 to run a standalone GraphDB instance.
    nodesCount: 1
    # -- A secret used for secure communication amongst the nodes in the cluster.
    clusterSecret: s3cr37
    # -- Timeout for the cluster creation CURL query.
    # Note: By default helm waits for Kubernetes commands to complete for 5 minutes. You can increase that by adding "--timeout 10m" to the helm command.
    clusterCreationTimeout: 60
    # -- Cluster configuration parameters:
    # The minimum wait time in milliseconds for a heartbeat from a leader.
    electionMinTimeout: 8000
    # The variable portion of each waiting period in milliseconds for a heartbeat.
    electionRangeTimeout: 6000
    # The interval in milliseconds between each heartbeat that is sent to follower nodes by the leader.
    heartbeatInterval: 2000
    #The size of the data blocks transferred during data replication streaming through the RPC protocol.
    messageSize: 64
    # The amount of time in milliseconds a follower node would wait before attempting to verify the last committed entry when the first verification is unsuccessful.
    verificationTimeout: 1500

  # -- References to configuration maps containing settings.js, users.js, graphdb.properties, and logback.xml files to overwrite
  # the default GraphDB configuration. For reference see https://graphdb.ontotext.com/documentation/standard/configuring-graphdb.html
  configs:
    # Override default settings configuration
    #settingsConfigMap: graphdb-settings-configmap
    # Override default users configuration
    #usersConfigMap: graphdb-users-configmap
    # Override default properties configuration
    #propertiesConfigMap: graphdb-properties-configmap
    # Override default logback configuration
    #logbackConfigMap: graphdb-logback-configmap
    # Optional configmap containing repository configuration ttl file(s). GraphDB will automatically create repositories with the provided repositories configuration files
    # provisionRepositoriesConfigMap: graphdb-repositories-configmap

  security:
    # If the security is enabled, it's mandatory to have a provisioning user, so the health-checks and cluster linking can work properly
    enabled: false
    provisioningUsername: provisioner
    # bcrypt encrypted password. default: iHaveSuperpowers
    provisioningPassword: iHaveSuperpowers

  # jobSecurityContext defines privilege and access control settings for all the job pods
  jobPodSecurityContext: {}
  # jobContainerSecurityContext defines privilege and access control settings for all the job containers
  jobSecurityContext: {}
  # jobResources defines resource requests and limits for all the job containers
  jobResources: {}

  # -- Settings for the GraphDB cluster nodes
  node:
    # -- Reference to a secret containing 'graphdb.license' file to be used by the nodes.
    # Important: Must be created beforehand
    license:
    # -- Java arguments with which node instances will be launched. GraphDB configuration properties can also be passed here in the format -Dprop=value
    java_args: "-XX:MaxRAMPercentage=70 -Ddefault.min.distinct.threshold=100m -XX:+UseContainerSupport"
    # Node scheduling options such as nodeSelector, affinity, tolerations, topologySpreadConstraints can be set here for ALL nodes.
    # By default, no restrictions are applied.
    nodeSelector: {}
    affinity: {}
    tolerations: []
    topologySpreadConstraints: []
    # Extra pod labels and annotations
    podLabels: {}
    podAnnotations: {}
    # -- GraphDB node service configurations
    service:
      # Extra annotations to append to the service
      annotations: {}
    # -- Persistence configurations.
    # By default, Helm will use a PV that reads and writes to the host file system.
    persistence:
      # use dynamic volume provisioning
      volumeClaimTemplateSpec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "5Gi"
    # -- Below are minimum requirements for data sets of up to 50 million RDF triples
    # For resizing, refer according to the GraphDB documentation
    # https://graphdb.ontotext.com/documentation/10.2/requirements.html
    resources:
      limits:
        memory: 2Gi
      requests:
        memory: 2Gi
        cpu: 0.5
    # -- Configurations for the GraphDB node startup probe. Misconfigured probe can lead to a failing cluster.
    startupProbe:
      httpGet:
        path: /protocol
        port: graphdb
      failureThreshold: 30
      timeoutSeconds: 5
      periodSeconds: 10
    # -- Configurations for the GraphDB node readiness probe. Misconfigured probe can lead to a failing cluster.
    readinessProbe:
      httpGet:
        path: /protocol
        port: graphdb
      initialDelaySeconds: 5
      timeoutSeconds: 5
      periodSeconds: 10
    # -- Configurations for the GraphDB node liveness probe. Misconfigured probe can lead to a failing cluster.
    livenessProbe:
      httpGet:
        path: /protocol
        port: graphdb
      initialDelaySeconds: 60
      timeoutSeconds: 5
      periodSeconds: 10
    # additional environment variables to be set for the graphdb nodes
    extraEnvFrom: []
    # additional environment variables to be set for the graphdb nodes
    extraEnv: []
    # additional volumes to be set for the graphdb nodes
    extraVolumes: []
    # additional volume mounts to be set for the graphdb nodes
    extraVolumeMounts: []
    # podSecurityContext defines privilege and access control settings for the node pods.
    podSecurityContext: {}
    # securityContext defines privilege and access control settings for the node container running graphdb.
    securityContext: {}
    # provisionSecurityContext defines privilege and access control settings for the node containers provisioning configurations for graphdb.
    initContainerSecurityContext: {}
    # initContainerResources defines resource requests and limits for the node containers provisioning configurations for graphdb.
    initContainerResources: {}
    # changes the maximum amount of kept revisions
    revisionHistoryLimit: 10
    # grace period in seconds before terminating the pods
    terminationGracePeriodSeconds: 120
    # overrides the default container command, use only for troubleshooting!
    command:
    # overrides the default container command's arguments, use only for troubleshooting!
    args:

  # -- Settings for the GraphDB cluster proxy used to communicate with the GraphDB cluster
  # Note: If there is no cluster (graphdb.clusterConfig.nodesCount is set to 1) no proxy will be deployed
  clusterProxy:
    # -- Number of cluster proxies used to access the GraphDB cluster
    replicas: 1
    # -- Java arguments with which the cluster proxy instances will be launched. GraphDB configuration properties can also be passed here in the format -Dprop=value
    java_args: "-XX:MaxRAMPercentage=70 -Ddefault.min.distinct.threshold=100m -XX:+UseContainerSupport"
    # -- Service type used by the graphdb-cluster-proxy service
    # Note: If using ALB in AWS EKS this will default to being on the public internet
    serviceType: LoadBalancer
    # Node scheduling options such as nodeSelector, affinity, tolerations, topologySpreadConstraints can be set here for ALL nodes.
    # By default, no restrictions are applied.
    nodeSelector: {}
    affinity: {}
    tolerations: []
    topologySpreadConstraints: []
    # Extra pod labels and annotations
    podLabels: {}
    podAnnotations: {}
    # -- GraphDB cluster proxy service configurations
    service:
      # Extra annotations to append to the service
      annotations: {}
    # -- GraphDB cluster proxy headless service configurations
    headlessService:
      # Extra annotations to append to the service
      annotations: {}
    # -- Minimum requirements for a successfully running GraphDB cluster proxy
    resources:
      limits:
        memory: 1500Mi
      requests:
        memory: 1500Mi
        cpu: 100m
    # -- Persistence configurations.
    # By default, Helm will use a PV that reads and writes to the host file system.
    persistence:
      # enable or disable proxy persistence
      enablePersistence: true
      # use dynamic volume provisioning
      volumeClaimTemplateSpec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "500Mi"
    # -- Configurations for the GraphDB cluster proxy startup probe. Misconfigured probe can lead to a failing cluster.
    startupProbe:
      httpGet:
        path: /proxy/ready
        port: gdb-proxy-port
      failureThreshold: 60
      timeoutSeconds: 3
      periodSeconds: 5
    # -- Configurations for the GraphDB cluster proxy readiness probe. Misconfigured probe can lead to a failing cluster.
    readinessProbe:
      httpGet:
        path: /proxy/ready
        port: gdb-proxy-port
      timeoutSeconds: 5
      periodSeconds: 10
    # -- Configurations for the GraphDB cluster proxy liveness probe. Misconfigured probe can lead to a failing cluster.
    livenessProbe:
      httpGet:
        path: /proxy/health
        port: gdb-proxy-port
      initialDelaySeconds: 120
      timeoutSeconds: 5
      periodSeconds: 10
    # additional environment variables to be set for each cluster proxy
    extraEnvFrom: []
    # additional environment variables to be set for each cluster proxy
    extraEnv: []
    # additional volumes to be set for each cluster proxy
    extraVolumes: []
    # additional volume mounts to be set for each cluster proxy
    extraVolumeMounts: []
    # podSecurityContext defines privilege and access control settings for the proxy pods.
    podSecurityContext: {}
    # securityContext defines privilege and access control settings for the proxy containers.
    securityContext: {}
    # changes the maximum amount of kept revisions
    revisionHistoryLimit: 10
    # grace period in seconds before terminating the pods
    terminationGracePeriodSeconds: 30

  # GraphDB workbench configurations
  workbench:
    # -- This is the sub path at which GraphDB workbench can be opened.
    # Should be configured in the API gateway (or any other proxy in front)
    subpath: /graphdb

  # WARNING: Setting enabled to true in most cloud providers will result in an error
  # Attach additional PV which will be used as an import directory
  # https://graphdb.ontotext.com/documentation/standard/loading-data-using-the-workbench.html#importing-server-files
  import_directory_mount:
    enabled: false
    volumeClaimTemplateSpec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          storage: "10Gi"

  # Pod Disruption Budget for GraphDB nodes
  # See https://kubernetes.io/docs/concepts/workloads/pods/disruptions/#pod-disruption-budgets
  pdb:
    create: false
    minAvailable: "51%"
    maxUnavailable:
